import * as _uploadthing_shared from '@uploadthing/shared';
import { UploadThingError } from '@uploadthing/shared';
import * as effect_Cause from 'effect/Cause';
import * as _effect_platform_HttpServerError from '@effect/platform/HttpServerError';
import * as effect_ConfigError from 'effect/ConfigError';
import { HttpRouter, HttpBody, HttpClient } from '@effect/platform';
import * as Context from 'effect/Context';
import * as Effect from 'effect/Effect';
import { RouteHandlerOptions, FileRouter } from '../../types/index.js';
import { AdapterFnArgs } from './types.cjs';

declare const AdapterArguments_base: Context.TagClass<AdapterArguments, "uploadthing/AdapterArguments", AdapterFnArgs<any, any, any>>;
declare class AdapterArguments extends AdapterArguments_base {
}
declare const makeAdapterHandler: <Args extends any[]>(makeAdapterArgs: (...args: Args) => Effect.Effect<AdapterFnArgs<any, any, any>>, toRequest: (...args: Args) => Effect.Effect<Request>, opts: RouteHandlerOptions<FileRouter>, beAdapter: string) => ((...args: Args) => Promise<Response>);
declare const createRequestHandler: <TRouter extends FileRouter>(opts: RouteHandlerOptions<TRouter>, beAdapter: string) => Effect.Effect<HttpRouter.HttpRouter<effect_ConfigError.ConfigError | HttpBody.HttpBodyError | _effect_platform_HttpServerError.RequestError | effect_Cause.NoSuchElementException, HttpClient.HttpClient | AdapterArguments>, _uploadthing_shared.InvalidRouteConfigError | effect_ConfigError.ConfigError | UploadThingError<{
    message: string;
}>, never>;

export { AdapterArguments, createRequestHandler, makeAdapterHandler };
